// Code generated by mockery v2.44.1. DO NOT EDIT.

package redislock

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRedisLock is an autogenerated mock type for the RedisLock type
type MockRedisLock struct {
	mock.Mock
}

type MockRedisLock_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRedisLock) EXPECT() *MockRedisLock_Expecter {
	return &MockRedisLock_Expecter{mock: &_m.Mock}
}

// Lock provides a mock function with given fields: ctx, ttl
func (_m *MockRedisLock) Lock(ctx context.Context, ttl time.Duration) Error {
	ret := _m.Called(ctx, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 Error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) Error); ok {
		r0 = rf(ctx, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Error)
		}
	}

	return r0
}

// MockRedisLock_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type MockRedisLock_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
//   - ctx context.Context
//   - ttl time.Duration
func (_e *MockRedisLock_Expecter) Lock(ctx interface{}, ttl interface{}) *MockRedisLock_Lock_Call {
	return &MockRedisLock_Lock_Call{Call: _e.mock.On("Lock", ctx, ttl)}
}

func (_c *MockRedisLock_Lock_Call) Run(run func(ctx context.Context, ttl time.Duration)) *MockRedisLock_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockRedisLock_Lock_Call) Return(_a0 Error) *MockRedisLock_Lock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisLock_Lock_Call) RunAndReturn(run func(context.Context, time.Duration) Error) *MockRedisLock_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// ObtainLock provides a mock function with given fields: ctx, ttl, timeout, loopPeriod
func (_m *MockRedisLock) ObtainLock(ctx context.Context, ttl time.Duration, timeout time.Duration, loopPeriod time.Duration) Error {
	ret := _m.Called(ctx, ttl, timeout, loopPeriod)

	if len(ret) == 0 {
		panic("no return value specified for ObtainLock")
	}

	var r0 Error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, time.Duration, time.Duration) Error); ok {
		r0 = rf(ctx, ttl, timeout, loopPeriod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Error)
		}
	}

	return r0
}

// MockRedisLock_ObtainLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObtainLock'
type MockRedisLock_ObtainLock_Call struct {
	*mock.Call
}

// ObtainLock is a helper method to define mock.On call
//   - ctx context.Context
//   - ttl time.Duration
//   - timeout time.Duration
//   - loopPeriod time.Duration
func (_e *MockRedisLock_Expecter) ObtainLock(ctx interface{}, ttl interface{}, timeout interface{}, loopPeriod interface{}) *MockRedisLock_ObtainLock_Call {
	return &MockRedisLock_ObtainLock_Call{Call: _e.mock.On("ObtainLock", ctx, ttl, timeout, loopPeriod)}
}

func (_c *MockRedisLock_ObtainLock_Call) Run(run func(ctx context.Context, ttl time.Duration, timeout time.Duration, loopPeriod time.Duration)) *MockRedisLock_ObtainLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(time.Duration), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockRedisLock_ObtainLock_Call) Return(_a0 Error) *MockRedisLock_ObtainLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisLock_ObtainLock_Call) RunAndReturn(run func(context.Context, time.Duration, time.Duration, time.Duration) Error) *MockRedisLock_ObtainLock_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with given fields: ctx
func (_m *MockRedisLock) Unlock(ctx context.Context) Error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Unlock")
	}

	var r0 Error
	if rf, ok := ret.Get(0).(func(context.Context) Error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Error)
		}
	}

	return r0
}

// MockRedisLock_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type MockRedisLock_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRedisLock_Expecter) Unlock(ctx interface{}) *MockRedisLock_Unlock_Call {
	return &MockRedisLock_Unlock_Call{Call: _e.mock.On("Unlock", ctx)}
}

func (_c *MockRedisLock_Unlock_Call) Run(run func(ctx context.Context)) *MockRedisLock_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRedisLock_Unlock_Call) Return(_a0 Error) *MockRedisLock_Unlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisLock_Unlock_Call) RunAndReturn(run func(context.Context) Error) *MockRedisLock_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRedisLock creates a new instance of MockRedisLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRedisLock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRedisLock {
	mock := &MockRedisLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
